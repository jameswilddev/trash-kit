import * as htmlMinifier from 'html-minifier'
import ActionStepBase from './action-step-base'
import iterativelyMinify from '../../utilities/iteratively-minify'

export default class MinifyHtmlStep extends ActionStepBase {
  constructor (
    private readonly getHtml: () => string,
    private readonly storeResult: (html: string) => void
  ) {
    super(
      'minifyHtml',
      [],
      () => []
    )
  }

  async execute (): Promise<void> {
    const iterated = await iterativelyMinify(
      this.getHtml(),
      async previous => htmlMinifier.minify(previous, {
        caseSensitive: false,
        collapseBooleanAttributes: true,
        collapseInlineTagWhitespace: true,
        collapseWhitespace: true,
        conservativeCollapse: false,
        decodeEntities: true,
        html5: true,
        includeAutoGeneratedTags: false,
        keepClosingSlash: false,
        minifyCSS: true,
        minifyJS: false,
        minifyURLs: false,
        preserveLineBreaks: false,
        preventAttributesEscaping: false,
        processConditionalComments: false,
        removeAttributeQuotes: true,
        removeComments: true,
        removeEmptyAttributes: true,
        removeEmptyElements: true,
        removeOptionalTags: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        removeTagWhitespace: true,
        sortAttributes: true,
        sortClassName: true,
        trimCustomFragments: true,
        useShortDoctype: true
      })
    )

    this.storeResult(iterated.replace('<!doctypehtml>', '').replace('<body>', ''))
  }
}
